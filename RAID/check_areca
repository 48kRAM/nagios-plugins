#!/usr/bin/perl
# nagios: -epn
# vim: set ai sw=4:
#
# Perl Nagios check plugin for Areca RAID
#
# Created to work on a DDP-16D storage appliance running a very
# old version of Debian and Areca CLI 1.13.0
#
# Copyright 2015 Joshua Malone <jmalone@nrao.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# These lines include the Nagios-provided exit code perl module.
# You may need to adjust the location of your included lib directory.
use lib qw ( . /usr/lib/nagios/libexec /usr/lib/nagios/plugins );
use utils qw(%ERRORS);

# Enable warnings for cleaner coding
use warnings;

# Uncomment this line to use the Net::SNMP library
#use Net::SNMP;
use Getopt::Long qw(:config no_ignore_case);

# Set the name of your plugin script here. This will be used
# in the help and version output.
$PROGNAME="check_areca";

# Enter the version number of your plugin here. Remember to
# increment this version each time your release or commit it.
# You can use integers or real numbers (x.y) as you please.
$VERSION=4;

# Your name - used in version output
$AUTHOR_NAME='Josh Malone';

# Your email address or other info string. Be sure to use
# single-quotes so that perl doesn't interpret an email address
# as an array.
$AUTHOR_INFO='jmalone@nrao.edu';

# Help function.
# This function is called to provide usage information to the user
# either when asked for via --help or -h or when an illegal option
# is given on the command line. Be sure to add any additional options
# that you use in your plugin to this output.
sub print_help () {
    my $help = << "EOH";
Usage: $PROGNAME [options]

    -C, --cli-path	Full path to the Areca cli
    -w, --warning	Disk temperature warning threshold (C)
    -c, --critical	Disk temperature critical threshold (C)
    --cpu-warn		CPU temperature warning threshold (C)
    --cpu-crit		CPU temperature critical threshold (C)
    --check-disks	Perform deep check of disk status (longer run-time)
    --timeout		Change default plugin timeout (default 40 sec)
    -v, --verbose	Print verbose debugging output
    -V, --version	Print the plugin version and exit
    -h, --help		Print this help text

Note: Temperature thresholds are upper thresholds only. Ranges
      are not supported.

EOH
    print ($help);
    exit $ERRORS{'UNKNOWN'};
}

### Set some defaults
#
# Default status is 'OK'. Change the status if any threshold is exceeded.
# Note: This logic may or may not work for your plugin. Change this line
# if your plugin logic works differently.
$status='OK';

# Default disk temperature thresholds (in C)
#
$warn = 42;
$crit = 50;

# Controller/CUP temp thresholds
# Default thresholds based on my unit's current stats, and:
#   http://christopher-technicalmusings.blogspot.com/2011/01/areca-1880ix-12-can-overheat-in-dell.html
$cpu_warn = 66;
$cpu_crit = 75;

# Battery unit thresholds. I'm unable to find clear documentation on what
# these percentages mean. I'm assuming they represent a relative health of
# the battery. If you know better, *PLESAE* send me docs.
$battery_warn = 60;
$battery_crit = 30;

$clipath='/usr/local/bin/cli32';

$alarm_timeout=40;

GetOptions(
    "C|cli-path=s"	=> \$clipath,
    "check-disks"	=> \$checkDisks,
    "w|warning=s"	=> \$warn,
    "c|critical=s"	=> \$crit,
    "cpu-warn=i"	=> \$cpu_warn,
    "cpu-crit=i"	=> \$cpu_crit,
    "timeout=i"		=> \$alarm_timeout,
    "v|verbose"		=> \$debug,
    "V|version"		=> \$doVersion,
    "h|help"		=> \$helpMe,
) or print_help();

if ($doVersion) {
    printf("%s by %s (%s) version %d\n", $PROGNAME, $AUTHOR_NAME, $AUTHOR_INFO, $VERSION);
    exit $ERRORS{'UNKNOWN'};
}
if ($helpMe) {
    # This call exits automatically.
    print_help();
}

if(defined ($warn) && $debug) {
    no warnings 'uninitialized';
    printf("Thresholds in use: Disk_Warn->%d , Disk_Crit->%d\n", $warn, $crit);
}

sub trim {
    my ($str, $start, $end) = @_;
    $ret=substr($str, $start, $end-$start);
    $ret=~s/^\s+|\s+$//g;
    return ($ret);
}
##########  Write your plugin logic below this line  #############

$status="OK";
$info="";

# Set alarm to time out possibly hung Areca cli command
alarm $alarm_timeout;
$SIG{ALRM} = sub {
    print "WARNING: Plugin timed out - possibly a hung Areca cli command\n";
    exit $ERRORS{'WARNING'};
};

# Check RAID sets
open (RSF, "$clipath rsf info |") or die ("Can't open areca CLI");
while ($rsfline=<RSF>) {
    if ($rsfline=~m/^ \d/) {
    	# RAID set line
	chomp($rsfline);
	my @rsfstat=split(/\s+/, $rsfline);
	my $raidname=trim($rsfline, 4, 21);
	my $numdisks=trim($rsfline, 22, 26);
	my $rstatus=$rsfstat[$#rsfstat];
	printf(" Detected Raid set %s (%d disks)\n", $raidname, $numdisks ) if ($debug);
	if( lc $rstatus ne "normal") {
	    $status="CRITICAL";
	    $info.=sprintf(" RAID set %s is %s\n", $raidname, $rstatus);
	}
    }
}
close(RSF);
# Check Volume sets
open (VSF, "$clipath vsf info |") or die ("Can't open Areca CLI");
while ($vsfline=<VSF>) {
    if($vsfline=~m/^ *\d/) {
	chomp($vsfline);
    	my @vsfstat=split(/\s+/, $vsfline);
	my $volname=trim($vsfline, 4, 21);
	my $level=trim($vsfline, 37, 42);
	my $vstatus=$vsfstat[$#vsfstat];
	printf(" Detected volume %s (%s)\n", $volname, $level) if ($debug);
	if (lc $vstatus ne "normal") {
	    if ($vstatus eq "rebuilding" ) {
		$status="WARNING";
	    } elsif ($vstatus eq "verifying") {
	    	$status="OK";
	    } else {
	    	$status="CRITICAL";
	    }
	    $info.=sprintf(" Volume %s is %s\n", $volname, $vstatus);
	}
    }
}
close (VSF);

# Check controller hw info
open (CLI, "$clipath hw info |") or die ("Can't query Area HW info");
while ($hwline=<CLI>) {
    if ($hwline=~m/CPU Temperature.*: (\d+) .*/i) {
    	$cputemp = $1;
	printf("CPU Temp is %d\n", $cputemp) if ($debug);
	# Check thresholds
	if ($cputemp > $cpu_crit) {
	    $status='CRITICAL';
	    $info.=" Controller CPU temp is $cputemp C";
	} elsif ($cputemp > $cpu_warn) {
	    $status='WARNING' if ($status ne 'CRITICAL');
	    $info.=" Controller CPU temp is $cputemp C";
	}
    }
    if ($hwline=~m/Controller Temp.*: (\d+) .*/) {
    	$ctrltemp = $1;
	printf("Controller temp is %d\n", $ctrltemp) if ($debug);
    }
    if ($hwline=~m/Battery Status.*(\d+)%/i) {
	printf(" Detected battery backup unit\n") if ($debug);
	$battery=$1;
    	printf("Battery status is %d%\n", $battery) if ($debug);
	if ($battery < $battery_crit) {
	    $status='CRITICAL';
	    $info.=" Battery status is $battery%";
	} elsif ($battery < $battery_warn ) {
	    $status='WARNING' if ($status ne 'CRITICAL');
	    $info.=" Battery status is $battery%";
	}
    }
}
close (CLI);

if(defined($checkDisks)) {
    # Check detailed disk data (optional as it makes check take longer)
    printf(" Checking disks...\n") if ($debug);
    %diskstat=();
    open (CLI, "$clipath disk info |") or die ("Can't open Areca CLI");
    while ($dline=<CLI>) {
	if ($dline=~m/^\s+\d+/) {
	    next if ($dline=~m/N\.A\..*N\.A\./);
	    @dinfo=split(/\s+/, $dline);
	    printf(" Detected disk %d (%s)\n", $dinfo[1], $dinfo[3]) if ($debug);
	    # Get detailed info for this disk
	    $dnum=$dinfo[1];
	    open (DISK, "$clipath disk info drv=$dnum |") or die ("Can't run Areca CLI");
	    while ($infoline=<DISK>) {
		chomp($infoline);
		if ($infoline=~m/Device State .*: (.*)/i) {
		    $diskstate=$1;
		    printf("Disk %d is %s\n", $dnum, $diskstate) if ($debug);
		    if (lc $diskstate ne 'normal') {
		    	$status='CRITICAL';
			$info.=" Disk $dnum is $diskstate";
		    }
		}
	    	if ($infoline=~m/Device Temperature/i) {
		    (my $disktemp = $infoline) =~ s/.*: //;
		    ($disktemp, $tempunit) = split(' ', $disktemp);
		    $diskstat{$dinfo[1]}{'temp'}=$disktemp;
		    $diskstat{$dinfo[1]}{'tempunit'}=$tempunit;
		    printf("Disk %d has temp %s%s\n", $dnum,
			$diskstat{$dnum}{'temp'}, $diskstat{$dnum}{'tempunit'} ) if ($debug);
		}
	    }
	    close (DISK);
	}
    }
    close (CLI);
}

if (!$info) {
    $info=" No problems detected by plugin";
}

#############  End of your plugin logic  ##############

# The Screen output should always begin with the readable status value
# ('OK', 'WARNING', 'CRITICAL' or 'UNKNOWN')
$outstring="$status:$info";

my $perfString="|";
$perfString.=sprintf("CPU_Temp=%dC;%d;%d Controller_Temp=%dC", $cputemp, $cpu_warn, $cpu_crit,
    $ctrltemp);
if(defined(%diskstat)) {
    printf(" Compiling performance data\n") if ($debug);
    # Compile the performance data string with thresholds
    foreach $disk (keys(%diskstat)) {
	$perfString.=sprintf(" Disk_%d=%d%s;%d;%d", $disk, $diskstat{$disk}{'temp'},
	    $diskstat{$disk}{'tempunit'}, $warn, $crit);
    }
}

if(defined($perfString)) {
    # Concatenate the Screen Ouput and perfdata to stdout so that Nagios can grab it.
    print "$outstring$perfString\n";
} else {
    print "$outstring\n";
}

# Exit with the status exit code appropriate to the textual status.
exit $ERRORS{$status};
