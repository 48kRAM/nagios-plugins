#!/usr/bin/perl
#
# Nagios plugin to check sensor data on a Sensaphone IMS-4000
#
# Copyright 2015 Joshua Malone <jmalone@nrao.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

use Net::SNMP;
use Getopt::Long qw(:config no_ignore_case);
use lib qw ( . /usr/lib/nagios/libexec );
use utils qw(%ERRORS);

$PROGNAME="check_ims_sensor";
$VERSION=6;

sub print_help () {
    my $help = << "EOH";
Usage: $PROGNAME -H <host address> [-C <community>] [-n <node>] -I <input> [(other options)]

    -I		Input channel number to check
    -n		Node number (Can specify 0 or omit for sensors on host)
    -C		SNMP community string (read is sufficient)
    -w		Warning threshold (supports Nagios range syntax)
    -c		Critical threshold (supports Nagios range syntax)
    -s		Force output to temperature system (F or C)
    -v		Verbose/debugging output
    -u		Override value unit string
    -t		Override input type string

    --list-sensors	List available sensors on selected node

EOH
    print ($help);
    exit $ERRORS{'UNKNOWN'};
}

### Set some defaults
$community="public";
# The types of input sensors available
%InputTypes = (
    1=> "temp",		2=> "temp",		3=> "humidity",
    4=> "water",	5=> "extPower",
    6=> "N.C. contact",		7=> "N.O. contact",
    8=> "smoke",	9=> "motion",		10=> "humidity",
    11=> "temp",	12=> "temp", 		16=> "Not Connected",
    17=> "hostPower",	18=> "nodePower",	19=> "battery",
    20=> "sound",	21=> "ip",
);

GetOptions(
    "H|host=s"		=> \$ims,
    "h|help"		=> \$helpme,
    "n|node=i"		=> \$node,
    "I|input=s"		=> \$input,
    "C|community=s"	=> \$community,
    "w|warning=s"	=> \$warn,
    "c|critical=s"	=> \$crit,
    "v|verbose"		=> \$debug,
    "u|unit=s"		=> \$unit,
    "s|system=s"	=> \$system,
    "t|type=s"		=> \$type,
    "V|version"		=> \$doVersion,
    "list-sensors"	=> \$doList,
) or print_help();

if (!$ims || $helpme) {
    print_help();
}
if ($doVersion) {
    printf("%s by Josh Malone (jmalone at nrao.edu) version %d\n", $PROGNAME, $VERSION);
    exit $ERRORS{'UNKNOWN'};
}
if ($warnLow || $critLow) {
    if (!defined($warnLow) or !defined($critLow)) {
        printf("Error: When using low thresholds, both warning and critical must be supplied!\n");
	exit $ERRORS{'UNKNOWN'};
    }
}

# Figure out the OID for the selected interface
$ims4000=".1.3.6.1.4.1.8338.1.1.1";
$OIDnode=1;
if ($node) {
    $OIDnode+=$node;
}
$typeOID="$ims4000.$OIDnode.8.1.1.3.$input";
$valueOID="$ims4000.$OIDnode.8.1.1.7.$input";
$labelOID="$ims4000.$OIDnode.8.1.1.2.$input";
$highLimOID="$ims4000.$OIDnode.8.1.1.14.$input";
$lowLimOID="$ims4000.$OIDnode.8.1.1.13.$input";

printf("OID is %s\n", $valueOID) if ($debug);

($s, $error) = Net::SNMP->session(
	-hostname => $ims, -community => $community, -timeout => 5, -version => 1
) or die ("Unable to create new SNMP session");
if (!$s) {
    printf("Session error: %s\n", $error);
    exit $ERRORS{'UNKNOWN'};
}
if($doList or !$input) {
    ### List available sensors
    printf("Available sensors:\n");
    for ($i=1; $i<12; $i++) {
	my $listType="$ims4000.$OIDnode.8.1.1.3.$i";
	my $listLabel="$ims4000.$OIDnode.8.1.1.2.$i";
	$res = $s->get_request(
	    -varbindlist => [ $listType, $listLabel ],
	);
	my $type=$res->{$listType};
	if($type==16) {
	    printf("  Ch %d: Not connected\n", $i);
	} else {
	    printf("  Ch %d: Type %s (%d), Name: %s\n", $i, $InputTypes{$res->{$listType}},
		$res->{$listType}, $res->{$listLabel} );
	}
    }
    printf("\n");
    print_help();
}
if(!$input) { print_help(); }

### Request the sensor type and value
$res = $s->get_request(
    -varbindlist => [$typeOID, $valueOID, $labelOID, $highLimOID, $lowLimOID ],
);
if(!defined($res)) {
    printf("CRITICAL: SNMP error: %s\n", $s->error);
    exit $ERRORS{'CRITICAL'};
}
$inputValue=$res->{$valueOID};
$inType=$res->{$typeOID};
$inLabel=$res->{$labelOID};
$imsLowAlarm=$res->{$lowLimOID};
$imsHighAlarm=$res->{$highLimOID};
if(!$inLabel eq "" and !$type) {
    $type=$inLabel;
}
printf("Sensor type is %d\n", $inType) if ($debug);
printf("Sensor label is %s\n", $inLabel) if ($debug);
printf("Raw value is %s\n", $inputValue) if ($debug);
printf("IMS config thresholds: %d-%d\n", $imsLowAlarm, $imsHighAlarm) if ($debug);

# Use alarm range configured in IMS if no thresholds supplied in arguments
if(!$crit) {
    $crit=$imsHighAlarm;
    $critLow=$imsLowAlarm;
}

# Adapt to the sensor type
if ($inType==1 or $inType==11) {
    # Temperature in F
    $unit='degrees F' unless ($unit);
    $type="Temperature" unless ($type);
    $perfLabel="temp";
    $perfUnit="F";
} elsif($inType==2 or $inType==12) {
    # Temperature in C
    $unit='degrees C' unless ($unit);
    $type="Temperature" unless ($type);
    $perfLabel="temp";
    $perfUnit="C";
} elsif($inType==3 or $inType==10) {
    # Humidity (relative %)
    $unit='%' unless ($unit);
    $type="Humidity" unless ($type);
    $perfLabel="humidity";
    $perfUnit="%";
} elsif($inType==17 or $inType==18) {
    # Power - internal; 0 is normal, 1 is power out
    $warn=$crit=1;
    $type='Power fail' unless ($type);
    $perfLabel='powerfail';
} elsif($inType==20) {
    # Sound - usually via internal mic
    $unit='dB' unless ($unit);
    $type='Sound volume' unless ($type);
    $perfLabel='sound';
    $perfUnit=$unit;
} elsif($inType==4) {
    # Water sensor
    $warn=$crit=1;
    $type=$inLabel unless ($type);
    $perfLabel='sensor';
} elsif($inType==7) {
    # Normally-open contact
    $warn=$crit=1;
    $type="Dry contact $inLabel";
    $perfLabel='contact';
} elsif($inType==16) {
    printf("Error: Input %d is not connected\n", $input);
    exit $ERRORS{'UNKNOWN'};
} else {
    printf("Error: Input type %s is unsupported at this time.\n", $InputTypes{$inType} );
    exit $ERRORS{'UNKNOWN'};
}

### Convert to desired temperature system
if ($system && ($unit =~ /degrees/) ) {
    if ($perfUnit ne $system) {
    	use Math::Round;
        print("Converting temperature system ") if ($debug);
        if ($system eq 'F') {
            # Convert to F
            printf("to Farenheit\n") if ($debug);
            $inputValue=round($inputValue * 9 / 5 + 32);
            $perfUnit='F';
	    $unit='degrees F';
        } elsif ($system eq 'C') {
            # Convert to C
            printf("to Celsius\n") if ($debug);
            $inputValue=round( ($inputValue-32) * 5 / 9 );
            $perfUnit='C';
	    $unit='degrees C';
        } else {
            # No other systems supported
            printf("Error - invalid temperature system specified!\n");
            exit $ERRORS{'UNKNOWN'};
        }
    }
}

### Process the value
$status="OK";
@Warn=split(':', $warn) if (defined($warn));
@Crit=split(':', $crit) if (defined($crit));
if(scalar(@Warn) > 1) {
    printf("Checking low and high warning thresholds\n") if ($debug);
    ($warnLow, $warn)=@Warn;
}
if(scalar(@Crit) > 1) {
    printf("Checking low and high critical thresholds\n") if ($debug);
    ($critLow, $crit)=@Crit;
}
printf("Thresholds in use: W->%d:%d , C->%d:%d\n", $warnLow, $warn, $critLow, $crit) if ($debug);
if($warnLow) {
    ## Process lower warning/critical thresholds
    if ($inputValue <= $warnLow) {
        $status="WARNING";
    }
}
if($critLow) {
    if ($inputValue <= $critLow) {
        $status="CRITICAL";
    }
}

if($status eq "OK") {
    # Value is not too low, so check the upper thresholds
    if ($warn and $inputValue >= $warn) {
	$status="WARNING";
    }
    if ($inputValue >= $crit) {
	$status="CRITICAL";
    }
}

$outstring="$status: ";
if ($type) {
    $outstring.="$type is ";
}
$outstring.="$inputValue";
if ($unit) {
    $outstring.=" $unit";
}
if(defined($critLow)) {
    $perfWarnCrit=sprintf("%d:%d;%d:%d", $warnLow, $warn, $critLow, $crit);
} else {
    $perfWarnCrit=sprintf("%d;%d", $warn, $crit);
}
$perfData=sprintf("|%s=%d%s;%s", $perfLabel, $inputValue, $perfUnit, $perfWarnCrit);
print "$outstring$perfData\n";

exit $ERRORS{$status};
