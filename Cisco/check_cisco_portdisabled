#!/usr/bin/perl
# nagios: -epn
#
# Nagios plugin to watch Cisco switch logs for disabled ports (due to loopback)
#
# Copyright 2016 Joshua Malone <jmalone@nrao.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use Net::SNMP qw (ticks_to_time);
use Getopt::Long qw(:config no_ignore_case);
use lib qw ( . /usr/lib/nagios/libexec /usr/lib/nagios/plugins );
use utils qw(%ERRORS);

$PROGNAME='check_cisco_portdisabled';
$VERSION=1;

sub print_help () {
    my $help = << "EOH";
Usage: $PROGNAME -f <logfile> [options]

    -v		Verbose output
    -V		Print version information

EOH
    print ($help);
    exit $ERRORS{'UNKNOWN'};
}

### Set some defaults
$status="OK";

GetOptions(
    "f=s"		=> \$logfile,
    "v|verbose"         => \$debug,
    "V|version"		=> \$doVersion,
    "h|help"		=> \$helpme,
) or print_help();

if (!$logfile || $helpme) {
    print_help();
}
if ($doVersion) {
    printf("%s by Josh Malone (jmalone at nrao.edu) version %d\n", $PROGNAME, $VERSION);
    exit $ERRORS{'UNKNOWN'};
}

if (! -r $logfile) {
    printf("CRITICAL: Log file $logfile not present or readable\n");
    exit $ERRORS{'CRITICAL'};
}

open (LF, "<", $logfile) or {
    printf("UNKNOWN: Cannot open file $logfile for some reason\n");
    exit $ERRORS{'UNKNOWN'};
}
my %portslist = ();

while (<LF>) {
    chomp();
    if(/ERR_DISABLE/) {
        # Note a disabled port
        (my $port = $_) =~ s|.*putting (.*) in err.*|$1|;
        $port=~s|[^0-9\/]||g if ($port =~ m|/|);
        $portslist{$port} = 'disabled';
        print "Port $port has been err-disabled\n" if ($verbose);
    }
    if(/-UPDOWN/) {
        next unless (/changed state to up/);
        (my $port = $_) =~ s|.*protocol on (.*[0-9]), changed|$1|;
        $port=~s|[^0-9\/]||g if ($port =~ m|/|);
        if ($portslist{$port} eq 'disabled') {
            printf $fh ("Port %s was down but was handled\n", $port) if ($verbose);
            delete ($portslist{$port});
        }
    }
}

my @badports;
foreach $port (keys(%portslist)) {
    printf("Port %s is %s\n", $port, $portslist{$port} );
    push (@badports, $port);
    print $fh "Port $port has been disabled by switch";
}
close(LF);

if (scalar(@badports) > 0) {
    printf ("CRITICAL: %d ports disabled\n", scalar(@badports) );
    exit $ERRORS{'CRITICAL'};
} else {
    printf ("OK: no ports disabled due to error\n");
    exit $ERRORS{'OK'};
}
