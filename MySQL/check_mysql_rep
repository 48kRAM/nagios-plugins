#!/usr/bin/perl
#
# Check the status of a MySQL replication slave
#
# Copyright 2015 Joshua Malone <jmalone@nrao.edu>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# These lines include the Nagios-provided exit code perl module.
# You may need to adjust the location of your included lib directory.
use lib qw ( . /usr/lib/nagios/libexec );
use utils qw($TIMEOUT %ERRORS);

use Getopt::Long qw(:config no_ignore_case);
use DBI;

$PROGNAME="check_mysql_rep";
$VERSION=7;
$AUTHOR_NAME='Josh Malone',
$AUTHOR_INFO='https://github.com/48kRAM/nagios-plugins';

### Set some defaults
my $state='OK';
my $outstr="No replication errors";
my $sqlport=3306;

# Default delay thresholds
$warnsecs=10;
$critsecs=120;

sub printusage {
    my $helptext = << "EOH";
Usage: check_mysql_rep -H <host> -u <mysql user> -p <password> [options]

Options:

    -u | --user		MySQL username
    -p | --password	MySQL password
    -d | --debug	Print debugging output
    -v | --version	Print version info and exit
    -D <db> | --database <db>	Check that <db> is being replicated
    -port <port>	Connect to MySQL on non-standard port

 (Options for Seconds Behind Master)

    -w | --warning	Warning threshold (seconds)
    -c | --critical	Critical threshold (seconds)
EOH
    print($helptext);
    exit $ERRORS{'UNKNOWN'};
}

################################################

GetOptions(
    "h|help"		=> \$opt_h,
    "H|host=s"		=> \$hostname,
    "u|user=s"		=> \$opt_u,
    "p|password=s"	=> \$opt_p,
    "w|warning=i"	=> \$warnsecs,
    "c|critical=i"	=> \$critsecs,
    "d|debug"		=> \$debug,
    "v|version"		=> \$doVersion,
    "D|database=s"	=> \@replicate_dbs,
    "port=i"		=> \$sqlport
);

# Time out the check in Nagios's default timeout setting
alarm $TIMEOUT;
$SIG{ALRM} = sub {
    print "CRITICAL: Check plugin timed out!\n";
    exit $ERRORS{'CRITICAL'};
};

if ($doVersion) {
    printf("%s by %s (%s) version %d\n", $PROGNAME, $AUTHOR_NAME, $AUTHOR_INFO, $VERSION);
    exit $ERRORS{'UNKNOWN'};
}
if ($opt_h) {
    printusage();
}
if (! $hostname or ! $opt_u or ! $opt_p ) {
    printusage();
    exit $ERRORS{'UNKNOWN'};
}

my %dbi_attr = (RaiseError =>1, HandleError => \&abort_critical );

$dsn="DBI:mysql:;host=$hostname;port=$sqlport";
our $dbh=DBI->connect($dsn, $opt_u, $opt_p, \%dbi_attr);
$sth = $dbh->prepare("SHOW SLAVE STATUS");
$sth->execute();
while ($ref = $sth->fetchrow_hashref() ) {

    my $slave_state=$ref->{'Slave_IO_State'};
    if ($slave_state eq '') {
        $outstr=" Slave not running";
	$state='CRITICAL';
    }
    my $numerrs=$ref->{'Last_Errno'};

    if ($numerrs>0) {
	$outstr.=" $numerrs replication errors";
	$state='CRITICAL';
    }

    my $secs=$ref->{'Seconds_Behind_Master'};
    printf("Server is %d seconds behind master\n", $secs) if ($debug);
    if ($secs=~/^[0-9]+/) {
	if ($secs > $critsecs) {
	    $outstr.=" Slave is $secs seconds behind master";
	    $state=$ERRORS{'CRITICAL'};
	} elsif ($secs > $warnsecs) {
	    $outstr.=" Slave is $secs seconds behind master";
	    $state=$ERRORS{'WARNING'};
	}
    } else {
	$state="CRITICAL";
	$outstr.=" Unable to read seconds behind master";
    }

    @replicated_dbs{split(/,/, $ref->{'Replicate_Do_DB'}) } = 1;
}
$dbh->disconnect;

if (scalar(@replicate_dbs) > 0 ) {
    printf("Checking for defined replicated databases...\n") if ($debug);
    foreach my $check_db (@replicate_dbs) {
	if (! $replicated_dbs{$check_db}) {
	    $outstr.=" Database $check_db is not being replicated";
	    $state='CRITICAL';
	}
    }
}

# Add performance data
if ($secs=~/^[0-9]+/) {
    $outstr.=" |delay=".$secs."s";
}

printf ("%s: %s\n", $state, $outstr);
exit $ERRORS{$state};

#####################

sub abort_critical {
    print "CRITICAL: Unable to make mysql connection to $hostname!\n";
    print $DBI::errstr ."\n";
    exit $ERRORS{'CRITICAL'};
}
